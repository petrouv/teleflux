[build-system]
requires = ["setuptools>=64.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "teleflux"
version = "1.0.0"
description = "Synchronize Telegram channels with Miniflux categories via RssHub"
authors = [{name = "Nikita Petrov", email = "petrov.nikita@gmail.com"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.9"
keywords = ["telegram", "rss", "miniflux", "rsshub", "sync"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "pyrogram>=2.0.0",
    "tgcrypto>=1.2.0",
    "PyYAML>=6.0",
    "requests>=2.28.0",
    "tabulate>=0.9.0",
    "wcwidth>=0.2.0",
]

[project.optional-dependencies]
all = [
    "pyrogram>=2.0.0",
    "tgcrypto>=1.2.0",
    "PyYAML>=6.0",
    "requests>=2.28.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.4.0",
]

[project.scripts]
teleflux = "teleflux.cli:main"

[tool.setuptools.packages.find]
include = ["teleflux*"]

[tool.setuptools.package-data]
teleflux = ["../icon.png"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"] 

# Ruff linter configuration
[tool.ruff]
target-version = "py39"
line-length = 88
exclude = [
    ".venv",
    ".git",
    "data",
    "teleflux.egg-info",
]

[tool.ruff.lint]
# Enable flake8-style rules, import sorting, and other useful rules
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # Pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # flake8-bandit
    "C90", # McCabe complexity
]
ignore = [
    "S101", # Allow assert statements (needed for tests)
    "S608", # Possible SQL injection via string concatenation (for simple cases)
    "B904", # raise ... from err - can be fixed later
    "C901", # Complex functions - refactor later
    "E501", # Line too long - can be fixed later
    "N806", # Variable naming in function
    "S110", # try-except-pass
    "S324", # Insecure hash functions (md5 for non-cryptographic use)
    "S105", # Hardcoded password in tests
    "B007", # Unused loop variable
    "E402", # Module level import not at top of file
    "E722", # Do not use bare except
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101", # Allow assert statements in tests
    "S106", # Allow hardcoded passwords in tests
    "S311", # Allow pseudo-random generators in tests
]

[tool.ruff.lint.isort]
known-first-party = ["teleflux"]
force-single-line = false

[tool.ruff.lint.mccabe]
max-complexity = 10 